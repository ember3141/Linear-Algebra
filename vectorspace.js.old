
function setup() {
  createCanvas(500, 500);
  background(50);


}
var mc = 0, mx = 0, my = 0, v = {
  1: {
    1: {
      x: 0,
      y: 0
    },
    2: {
      x: 0,
      y: 0,
    }
  },
  2: {
    1: {
      x: 0,
      y: 0
    },
    2: {
      x: 0,
      y: 0,
    }
  }
};
function draw() {
  mx = (mouseX - width / 2);
  my = mouseY - height / 2;

  clear();
  push();
  stroke(255);
  line(width / 2, 0, width / 2, height);
  line(0, height / 2, width, height / 2);
  pop();
  push();
  fill(255);
  textSize(25);
  stroke(0);
  strokeWeight(4);

  switch (mc) {
    case 0:
      v[1][1].x = width / 2;
      v[1][1].y = height / 2;
      v[1][2].x = mx;
      v[1][2].y = my;
      text('click to set first vector: (' + mx + ", " + -my + ")", 50, 50);
      drawArrow(v[1][1], v[1][2], 'red');
      break;
    case 1:
      v[2][1].x = width / 2;
      v[2][1].y = height / 2;
      v[2][2].x = mx;
      v[2][2].y = my;
      text('click to set second vector: (' + mx + ", " + -my + ")", 50, 50);
      drawArrow(v[1][1], v[1][2], 'red');
      drawArrow(v[2][1], v[2][2], 'blue');
      break;
    case 2: 
   
      v[2][1].x = lerp(v[2][1].x, v[1][1].x+v[1][2].x,0.1);
      v[2][1].y = lerp(v[2][1].y, v[1][1].y+v[1][2].y,0.1);
      drawArrow(v[1][1], v[1][2], 'red');
      drawArrow(v[2][1], v[2][2], 'blue');
      if(dist(v[2][1].x, v[2][1].y, v[1][1].x+v[1][2].x, v[1][1].y+v[1][2].y) <1){
        v[2][1].x= v[1][1].x+v[1][2].x;
         v[2][1].y= v[1][1].y+v[1][2].y;
        mc++;
      }
      break;
    case 3:
      text('click to restart', 50, 50);
      drawArrow(v[1][1], v[1][2], 'red');
      drawArrow(v[2][1], v[2][2], 'blue');
      break;
    default:
      mc = 0;
      break;
  }
  pop();

}


function drawArrow(base, vec, myColor) {
  push();
  stroke(myColor);
  strokeWeight(3);
  fill(myColor);

  translate(base.x, base.y);
  line(0, 0, vec.x, vec.y);
  let angle = Math.atan2(vec.y, vec.x);
  let mag = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
  rotate(angle);
  let arrowSize = 7;
  translate(mag - arrowSize, 0);
  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);

  pop();
}


function mouseClicked() {
  mc++;
}

